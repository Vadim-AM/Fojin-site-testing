{"uid":"194f90ea59ade527","name":"User can see and go to the \"t.me/fojin_tech\" link","fullName":"ui_tests.test_main_page.TestMainPage#test_bottom_elements_are_active","historyId":"3889214c86ccbaaa48ae43f2994fa135","time":{"start":1675080314750,"stop":1675080319145,"duration":4395},"description":"\n        user can go to all bottom links from the main page\n        ","descriptionHtml":"<pre><code>    user can go to all bottom links from the main page\n</code></pre>\n","status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (1537, 1249)\n  (Session info: headless chrome=109.0.5414.74)\nStacktrace:\n#0 0x55b416298303 <unknown>\n#1 0x55b41606cd37 <unknown>\n#2 0x55b4160afe29 <unknown>\n#3 0x55b4160ade2f <unknown>\n#4 0x55b4160ab9de <unknown>\n#5 0x55b4160aab7d <unknown>\n#6 0x55b41609e9a5 <unknown>\n#7 0x55b4160c9982 <unknown>\n#8 0x55b41609e22f <unknown>\n#9 0x55b4160c9b4e <unknown>\n#10 0x55b4160e188c <unknown>\n#11 0x55b4160c9753 <unknown>\n#12 0x55b41609ca14 <unknown>\n#13 0x55b41609db7e <unknown>\n#14 0x55b4162e732e <unknown>\n#15 0x55b4162eac0e <unknown>\n#16 0x55b4162cd610 <unknown>\n#17 0x55b4162ebc23 <unknown>\n#18 0x55b4162bf545 <unknown>\n#19 0x55b41630c6a8 <unknown>\n#20 0x55b41630c836 <unknown>\n#21 0x55b416327d13 <unknown>\n#22 0x7f9f9d392b43 <unknown>","statusTrace":"self = <ui_tests.test_main_page.TestMainPage object at 0x7f12b6e61890>\nelement = 't.me/fojin_tech'\nlocator = ('css selector', 'a.sc-5e48d489-4:nth-child(2)')\nbrowser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"e2682212200f802501e5aa14de418132\")>\n\n    @severity(severity_level.MINOR)\n    @allure.feature('User can go to the policy page and to the social page links')\n    @allure.title('User can see and go to the \"{element}\" link')\n    @pytest.mark.parametrize('element, locator',\n                             list(zip(MainPageData.BOTTOM_ENDPOINTS, MainPageData.BOTTOM_ELEM_LIST)))\n    def test_bottom_elements_are_active(self, element: str, locator: tuple, browser) -> None:\n        \"\"\"\n        user can go to all bottom links from the main page\n        \"\"\"\n        page = MainPage(browser, self.URL)\n        page.open()\n        page.scroll_to_the_bottom()\n        if page.is_element_present(MainPageLocators.COOKIES):\n            page.scroll_to_and_click_element(MainPageLocators.COOKIES)\n>       page.scroll_to_and_click_element(locator)\n\nui_tests/test_main_page.py:57: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nui_tests/pages/main_page.py:37: in scroll_to_and_click_element\n    element.click()\n/opt/hostedtoolcache/Python/3.11.1/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:93: in click\n    self._execute(Command.CLICK_ELEMENT)\n/opt/hostedtoolcache/Python/3.11.1/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:403: in _execute\n    return self._parent.execute(command, params)\n/opt/hostedtoolcache/Python/3.11.1/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:440: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f12b59d4590>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x55b41630c836 \\\\u003Cunknown>\\\\n#21 0x55b416327d13 \\\\u003Cunknown>\\\\n#22 0x7f9f9d392b43 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (1537, 1249)\nE         (Session info: headless chrome=109.0.5414.74)\nE       Stacktrace:\nE       #0 0x55b416298303 <unknown>\nE       #1 0x55b41606cd37 <unknown>\nE       #2 0x55b4160afe29 <unknown>\nE       #3 0x55b4160ade2f <unknown>\nE       #4 0x55b4160ab9de <unknown>\nE       #5 0x55b4160aab7d <unknown>\nE       #6 0x55b41609e9a5 <unknown>\nE       #7 0x55b4160c9982 <unknown>\nE       #8 0x55b41609e22f <unknown>\nE       #9 0x55b4160c9b4e <unknown>\nE       #10 0x55b4160e188c <unknown>\nE       #11 0x55b4160c9753 <unknown>\nE       #12 0x55b41609ca14 <unknown>\nE       #13 0x55b41609db7e <unknown>\nE       #14 0x55b4162e732e <unknown>\nE       #15 0x55b4162eac0e <unknown>\nE       #16 0x55b4162cd610 <unknown>\nE       #17 0x55b4162ebc23 <unknown>\nE       #18 0x55b4162bf545 <unknown>\nE       #19 0x55b41630c6a8 <unknown>\nE       #20 0x55b41630c836 <unknown>\nE       #21 0x55b416327d13 <unknown>\nE       #22 0x7f9f9d392b43 <unknown>\n\n/opt/hostedtoolcache/Python/3.11.1/x64/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:245: ElementClickInterceptedException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"browser","time":{"start":1675080313769,"stop":1675080314749,"duration":980},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"afterStages":[{"name":"browser::0","time":{"start":1675080319190,"stop":1675080319692,"duration":502},"status":"passed","steps":[],"attachments":[{"uid":"d464de7fbfc2be54","name":"Screenshot test_bottom_elements_are_active[chrome-t.me/fojin_tech-locator2]","source":"d464de7fbfc2be54.png","type":"image/png","size":83522},{"uid":"97bdfaeccb737611","name":"Screenshot fail_test_bottom_elements_are_active[chrome-t.me/fojin_tech-locator2]","source":"97bdfaeccb737611.png","type":"image/png","size":83522}],"parameters":[],"stepsCount":0,"attachmentsCount":2,"shouldDisplayMessage":false,"hasContent":true}],"labels":[{"name":"severity","value":"minor"},{"name":"feature","value":"User can go to the policy page and to the social page links"},{"name":"parentSuite","value":"ui_tests"},{"name":"suite","value":"test_main_page"},{"name":"subSuite","value":"TestMainPage"},{"name":"host","value":"fv-az193-939"},{"name":"thread","value":"2945-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"ui_tests.test_main_page"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"browser","value":"'chrome'"},{"name":"element","value":"'t.me/fojin_tech'"},{"name":"locator","value":"('css selector', 'a.sc-5e48d489-4:nth-child(2)')"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"minor","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":2,"skipped":0,"passed":1,"unknown":0,"total":3},"items":[{"uid":"459cdc8a49218ee0","reportUrl":"https://Vadim-AM.github.io/Fojin-site-testing/3//#testresult/459cdc8a49218ee0","status":"broken","statusDetails":"selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_TIMED_OUT\n  (Session info: headless chrome=109.0.5414.74)\nStacktrace:\n#0 0x564ab04af303 <unknown>\n#1 0x564ab0283d37 <unknown>\n#2 0x564ab027bd85 <unknown>\n#3 0x564ab026ef87 <unknown>\n#4 0x564ab02704e9 <unknown>\n#5 0x564ab026f2fe <unknown>\n#6 0x564ab026e432 <unknown>\n#7 0x564ab026e285 <unknown>\n#8 0x564ab026cc77 <unknown>\n#9 0x564ab026d2a4 <unknown>\n#10 0x564ab0285c48 <unknown>\n#11 0x564ab02f8f15 <unknown>\n#12 0x564ab02e0982 <unknown>\n#13 0x564ab02f888c <unknown>\n#14 0x564ab02e0753 <unknown>\n#15 0x564ab02b3a14 <unknown>\n#16 0x564ab02b4b7e <unknown>\n#17 0x564ab04fe32e <unknown>\n#18 0x564ab0501c0e <unknown>\n#19 0x564ab04e4610 <unknown>\n#20 0x564ab0502c23 <unknown>\n#21 0x564ab04d6545 <unknown>\n#22 0x564ab05236a8 <unknown>\n#23 0x564ab0523836 <unknown>\n#24 0x564ab053ed13 <unknown>\n#25 0x7f7ec13bfb43 <unknown>","time":{"start":1674806601973,"stop":1674806732002,"duration":130029}},{"uid":"a49b6d26379f3f11","reportUrl":"https://Vadim-AM.github.io/Fojin-site-testing/2//#testresult/a49b6d26379f3f11","status":"passed","time":{"start":1673944023758,"stop":1673944028582,"duration":4824}}]},"tags":[]},"source":"194f90ea59ade527.json","parameterValues":["'chrome'","'t.me/fojin_tech'","('css selector', 'a.sc-5e48d489-4:nth-child(2)')"]}