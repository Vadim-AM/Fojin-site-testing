{"uid":"c715e3e123ca1841","name":"User can see and go to the \"contacts\" link","fullName":"ui_tests.test_main_page.TestMainPage#test_link_names","historyId":"5f2813c1b331f0f751b7663dc81cc6e6","time":{"start":1674806261151,"stop":1674806392030,"duration":130879},"description":"\n        user can go to all top links from the main page\n        ","descriptionHtml":"<pre><code>    user can go to all top links from the main page\n</code></pre>\n","status":"broken","statusMessage":"selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_TIMED_OUT\n  (Session info: headless chrome=109.0.5414.74)\nStacktrace:\n#0 0x558d7b0ee303 <unknown>\n#1 0x558d7aec2d37 <unknown>\n#2 0x558d7aebad85 <unknown>\n#3 0x558d7aeadf87 <unknown>\n#4 0x558d7aeaf4e9 <unknown>\n#5 0x558d7aeae2fe <unknown>\n#6 0x558d7aead432 <unknown>\n#7 0x558d7aead285 <unknown>\n#8 0x558d7aeabc77 <unknown>\n#9 0x558d7aeac2a4 <unknown>\n#10 0x558d7aec4c48 <unknown>\n#11 0x558d7af37f15 <unknown>\n#12 0x558d7af1f982 <unknown>\n#13 0x558d7af3788c <unknown>\n#14 0x558d7af1f753 <unknown>\n#15 0x558d7aef2a14 <unknown>\n#16 0x558d7aef3b7e <unknown>\n#17 0x558d7b13d32e <unknown>\n#18 0x558d7b140c0e <unknown>\n#19 0x558d7b123610 <unknown>\n#20 0x558d7b141c23 <unknown>\n#21 0x558d7b115545 <unknown>\n#22 0x558d7b1626a8 <unknown>\n#23 0x558d7b162836 <unknown>\n#24 0x558d7b17dd13 <unknown>\n#25 0x7f759db45b43 <unknown>","statusTrace":"self = <ui_tests.test_main_page.TestMainPage object at 0x7fbad62d9850>\nbrowser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"e8928de9ae7c0c4fc278d6a728e77d9f\")>\nendpoint = 'contacts'\nlocator = ('css selector', 'a.sc-a0f0d973-0:nth-child(5)')\n\n    @severity(severity_level.CRITICAL)\n    @allure.feature('User can go to all top links')\n    @allure.title('User can see and go to the \"{endpoint}\" link')\n    @pytest.mark.parametrize('endpoint, locator', list(zip(MainPageData.ENDPOINTS, MainPageData.LINKS_LIST)))\n    def test_link_names(self, browser, endpoint: str, locator: tuple) -> None:\n        \"\"\"\n        user can go to all top links from the main page\n        \"\"\"\n        page = MainPage(browser, self.URL)\n>       page.open()\n\nui_tests/test_main_page.py:38: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nui_tests/pages/main_page.py:18: in open\n    self.browser.get(self.url)\n/opt/hostedtoolcache/Python/3.11.1/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:449: in get\n    self.execute(Command.GET, {\"url\": url})\n/opt/hostedtoolcache/Python/3.11.1/x64/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:440: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fbad4d4f750>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: net::ERR_CONNECTION_TIMED_OUT\\\\n...\\\\n#23 0x558d7b162836 \\\\u003Cunknown>\\\\n#24 0x558d7b17dd13 \\\\u003Cunknown>\\\\n#25 0x7f759db45b43 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_TIMED_OUT\nE         (Session info: headless chrome=109.0.5414.74)\nE       Stacktrace:\nE       #0 0x558d7b0ee303 <unknown>\nE       #1 0x558d7aec2d37 <unknown>\nE       #2 0x558d7aebad85 <unknown>\nE       #3 0x558d7aeadf87 <unknown>\nE       #4 0x558d7aeaf4e9 <unknown>\nE       #5 0x558d7aeae2fe <unknown>\nE       #6 0x558d7aead432 <unknown>\nE       #7 0x558d7aead285 <unknown>\nE       #8 0x558d7aeabc77 <unknown>\nE       #9 0x558d7aeac2a4 <unknown>\nE       #10 0x558d7aec4c48 <unknown>\nE       #11 0x558d7af37f15 <unknown>\nE       #12 0x558d7af1f982 <unknown>\nE       #13 0x558d7af3788c <unknown>\nE       #14 0x558d7af1f753 <unknown>\nE       #15 0x558d7aef2a14 <unknown>\nE       #16 0x558d7aef3b7e <unknown>\nE       #17 0x558d7b13d32e <unknown>\nE       #18 0x558d7b140c0e <unknown>\nE       #19 0x558d7b123610 <unknown>\nE       #20 0x558d7b141c23 <unknown>\nE       #21 0x558d7b115545 <unknown>\nE       #22 0x558d7b1626a8 <unknown>\nE       #23 0x558d7b162836 <unknown>\nE       #24 0x558d7b17dd13 <unknown>\nE       #25 0x7f759db45b43 <unknown>\n\n/opt/hostedtoolcache/Python/3.11.1/x64/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:245: WebDriverException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"browser","time":{"start":1674806260277,"stop":1674806261150,"duration":873},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"afterStages":[{"name":"browser::0","time":{"start":1674806392059,"stop":1674806392403,"duration":344},"status":"passed","steps":[],"attachments":[{"uid":"3795ddc8df2fd3bc","name":"Screenshot test_link_names[chrome-contacts-locator5]","source":"3795ddc8df2fd3bc.png","type":"image/png","size":10592},{"uid":"d5a356b08102b7aa","name":"Screenshot fail_test_link_names[chrome-contacts-locator5]","source":"d5a356b08102b7aa.png","type":"image/png","size":10592}],"parameters":[],"stepsCount":0,"attachmentsCount":2,"shouldDisplayMessage":false,"hasContent":true}],"labels":[{"name":"severity","value":"critical"},{"name":"feature","value":"User can go to all top links"},{"name":"parentSuite","value":"ui_tests"},{"name":"suite","value":"test_main_page"},{"name":"subSuite","value":"TestMainPage"},{"name":"host","value":"fv-az563-803"},{"name":"thread","value":"2923-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"ui_tests.test_main_page"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"browser","value":"'chrome'"},{"name":"endpoint","value":"'contacts'"},{"name":"locator","value":"('css selector', 'a.sc-a0f0d973-0:nth-child(5)')"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"critical","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":1,"unknown":0,"total":2},"items":[{"uid":"481ff089fd5a9e86","reportUrl":"https://Vadim-AM.github.io/Fojin-site-testing/2//#testresult/481ff089fd5a9e86","status":"passed","time":{"start":1673943989174,"stop":1673943992874,"duration":3700}}]},"tags":[]},"source":"c715e3e123ca1841.json","parameterValues":["'chrome'","'contacts'","('css selector', 'a.sc-a0f0d973-0:nth-child(5)')"]}